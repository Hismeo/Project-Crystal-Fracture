var projectName = [
        "MapShow",
        "ActionGuide",
        "BendsAnimator",
        "CrystalLib",
        "FractureClient",
        "HazeDungeon",
        "NuQuest"
]

group = mod_group_id
version = mod_version

base {
    archivesName = mod_name
}

neoForge {
    version = neo_version

    if (Boolean.getBoolean(enableAccessTransformers)) {
        accessTransformers = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    parchment {
        minecraftVersion = minecraft_version
        mappingsVersion = parchment_mappings
    }

    runs {
        client {
            client()
        }
        data {
            data()
        }
        server {
            server()
        }

        configureEach {
        }
    }

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

dependencies {
    implementation(project(':CrystalLib'))
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

def isRunningInIdea() {
    return System.getProperty("idea.active") == "true"
}

dependencies {
    projectName.forEach { mod -> implementation (project(":" + mod)) }
}