plugins {
    id 'idea'
    id "dev.architectury.loom" version "1.9.428"
//    id 'net.neoforged.moddev.legacyforge' version '2.0.78'
}

group = mod_group_id
version = mod_version

base {
    archivesName = mod_name
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

loom {
    forge {
        mixinConfigs = [
                "mixins.${mod_id}.json"
        ]
    }
}

//legacyForge {
//    version = "${minecraft_version}-${forge_version}"
//
//    if (Boolean.getBoolean(enableAccessTransformers)){
//        accessTransformers = [file('src/main/resources/META-INF/accesstransformer.cfg')]
//    }
//
//    if (mapping_channel=="parchment"){
//        parchment {
//            minecraftVersion = '1.20.1'
//            mappingsVersion = '2023.09.03'
//        }
//    }
//
//    runs {
//        client {
//            client()
//        }
//        data {
//            data()
//        }
//        server {
//            server()
//        }
//    }
//
//    mods {
//        testproject {
//            sourceSet sourceSets.main
//        }
//    }
//}

repositories {
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url 'https://jitpack.io' }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings(loom.officialMojangMappings())
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    implementation(project(':CrystalLib'))
    compileOnly 'org.jetbrains:annotations:24.0.1'
}

//mixin {
//    add sourceSets.main, "mixins.${mod_id}.refmap.json"
//    config "mixins.${mod_id}.json"
//}

sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    manifest.attributes([
            "Specification-Title": mod_id,
            "Specification-Vendor": mod_authors,
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": project.jar.archiveVersion,
            "Implementation-Vendor": mod_authors,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "mixins.${mod_id}.json"
    ])
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
